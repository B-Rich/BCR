test_case_name = test1
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie','buffs')
#workload[1] = put('movie','stars'); get('movie'); append ( 'movie', ' lovers ' )
#workload[2] = put('jedi,'luke skywalker); slice('jedis','0:4')
#workload[0] = put('movie','star')
#append('movie','stars'); get('movie')
failures[0,1] = shuttle(0,1), drop_result_stmt()
#failures[1,2] = result_shuttle(0,1),drop(); shuttle(1,3),omit_send()

-------------------------t = 1, client = 1, failure = 0 ----------------------------------------

test_case_name = test_t1c1f0_1
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star')

Description: 1 client, 3 replicas. Client sends put. Head receives put and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK


test_case_name = test_t1c1f0_2
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = get('movie')

Description: 1 client, 3 replicas. Client sends get. Head receives get and verifies dict, sends empty string in forward shuttle. All other replicas verify their dict and append result(empty string) to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: {} , Result: fail


test_case_name = test_t1c1f0_3
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = append('movie','stars')

Description: 1 client, 3 replicas. Client sends append. Head receives append and verifies dict, sends fail as result in forward shuttle. All other replicas verify their dict and send fail in forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: {} , Result: fail



test_case_name = test_t1c1f0_4
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = slice('movie','0:4')

Description: 1 client, 3 replicas. Client sends slice. Head receives slice and verifies dict, since indices are out of range, sends fail in forward shuttle. All other replicas verify their dict and append result(fail) to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: {} , Result: fail


test_case_name = test_t1c1f0_5
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star');  get('movie')

Description: 1 client, 3 replicas. Client sends valid put , get. Head receives operations and sends dict value for 'movie' in last forward shuttle. All other replicas verify their dict and append dict value for 'movie' to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK, ['star']


test_case_name = test_t1c1f0_6
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie','stars')

Description: 1 client, 3 replicas. Client sends put,append. Head receives both and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star', 'stars'] , Result: OK, OK


test_case_name = test_t1c1f0_7
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); slice('movie','1:4')

Description: 1 client, 3 replicas. Client sends get. Head receives both and verifies/modifies dict, sends fail in forward shuttle. All other replicas verify their dict and append result(fail) to final forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK, fail


test_case_name = test_t1c1f0_8
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie','stars'); get('movie')

Description: 1 client, 3 replicas. Client sends append. Head receives append and verifies dict, sends fail as result in forward shuttle. All other replicas verify their dict and send fail in forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star', 'stars'] , Result: OK, OK, ['star', 'stars']


test_case_name = test_t1c1f0_9
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star');append('movie','stars'); slice('movie','1:4')

Description: 1 client, 3 replicas. Client sends slice. Head receives slice and verifies dict, since indices are out of range, sends fail in forward shuttle. All other replicas verify their dict and append result(fail) to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle.
Dict: 'movie': ['stars'] , Result: OK, OK, OK


test_case_name = test_t1c1f0_10
t = 1
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); slice('movie','0:4')

Description: 1 client, 3 replicas. Client sends both operations. Head receives operations and verifies/modifies dict, sends OK in final forward shuttle. All other replicas verify their dict and append result('OK') to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK, OK

-------------------------t = 2, client = 1, failure = 0 ----------------------------------------

test_case_name = test_t2c1f0_1
t = 2
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star')

Description: 1 client, 5 replicas. Client sends put. Head receives put and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK


test_case_name = test_t2c1f0_2
t = 2
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = get('movie')

Description: 1 client, 5 replicas. Client sends get. Head receives get and verifies dict, sends empty string in forward shuttle. All other replicas verify their dict and append result(empty string) to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: {} , Result: fail


test_case_name = test_t2c1f0_3
t = 2
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = append('movie','stars')

Description: 1 client, 5 replicas. Client sends append. Head receives append and verifies dict, sends fail as result in forward shuttle. All other replicas verify their dict and send fail in forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: {} , Result: fail



test_case_name = test_t2c1f0_4
t = 2
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = slice('movie','0:4')

Description: 1 client, 5 replicas. Client sends slice. Head receives slice and verifies dict, since indices are out of range, sends fail in forward shuttle. All other replicas verify their dict and append result(fail) to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: {} , Result: fail


test_case_name = test_t2c1f0_5
t = 2
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star');  get('movie')

Description: 1 client, 5 replicas. Client sends valid put , get. Head receives operations and sends dict value for 'movie' in last forward shuttle. All other replicas verify their dict and append dict value for 'movie' to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK, ['star']


test_case_name = test_t2c1f0_6
t = 2
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie','stars')

Description: 1 client, 5 replicas. Client sends put,append. Head receives both and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star', 'stars'] , Result: OK, OK


test_case_name = test_t2c1f0_7
t = 2
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); slice('movie','1:4')

Description: 1 client, 5 replicas. Client sends get. Head receives both and verifies/modifies dict, sends fail in forward shuttle. All other replicas verify their dict and append result(fail) to final forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK, fail


test_case_name = test_t2c1f0_8
t = 2
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie','stars'); get('movie')

Description: 1 client, 5 replicas. Client sends append. Head receives append and verifies dict, sends fail as result in forward shuttle. All other replicas verify their dict and send fail in forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star', 'stars'] , Result: OK, OK, ['star', 'stars']


test_case_name = test_t2c1f0_9
t = 2
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star');append('movie','stars'); slice('movie','1:4')

Description: 1 client, 5 replicas. Client sends slice. Head receives slice and verifies dict, since indices are out of range, sends fail in forward shuttle. All other replicas verify their dict and append result(fail) to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle.
Dict: 'movie': ['stars'] , Result: OK, OK, OK


test_case_name = test_t2c1f0_10
t = 2
num_client = 1
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); slice('movie','0:4')

Description: 1 client, 5 replicas. Client sends both operations. Head receives operations and verifies/modifies dict, sends OK in final forward shuttle. All other replicas verify their dict and append result('OK') to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK, OK


-------------------------t = 1, client = 2, failure = 0 ----------------------------------------


test_case_name = test_t1c2f0_1
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star')
workload[1] = put('movie','stars')

Description: 2 client, 3 replicas. Client sends put. Head receives put and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK


test_case_name = test_t1c2f0_2
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','stars')
workload[1] = get('movie')

Description: 2 client, 3 replicas. Client sends get. Head receives get and verifies dict, sends empty string in forward shuttle. All other replicas verify their dict and append result(empty string) to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: {} , Result: fail


test_case_name = test_t1c2f0_3
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','stars')
workload[1] = append('movie','stars')

Description: 2 client, 3 replicas. Client sends append. Head receives append and verifies dict, sends fail as result in forward shuttle. All other replicas verify their dict and send fail in forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: {} , Result: fail



test_case_name = test_t1c2f0_4
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','stars')
workload[1] = append('movie','stars'); slice('movie','0:4')

Description: 2 client, 3 replicas. Client sends slice. Head receives slice and verifies dict, since indices are out of range, sends fail in forward shuttle. All other replicas verify their dict and append result(fail) to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: {} , Result: fail


test_case_name = test_t1c2f0_5
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie','buffs')
workload[1] = put('movie','stars'); get('movie'); append ( 'movie', ' lovers ' )

Description: 2 client, 3 replicas. Client sends valid put , get. Head receives operations and sends dict value for 'movie' in last forward shuttle. All other replicas verify their dict and append dict value for 'movie' to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK, ['star']

 ****************************************************************************
test_case_name = test_t1c2f0_6
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie','stars')

Description: 2 client, 3 replicas. Client sends put,append. Head receives both and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star', 'stars'] , Result: OK, OK


test_case_name = test_t1c2f0_7
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); slice('movie','1:4')

Description: 2 client, 3 replicas. Client sends get. Head receives both and verifies/modifies dict, sends fail in forward shuttle. All other replicas verify their dict and append result(fail) to final forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK, fail


test_case_name = test_t1c2f0_8
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie','stars'); get('movie')

Description: 2 client, 3 replicas. Client sends append. Head receives append and verifies dict, sends fail as result in forward shuttle. All other replicas verify their dict and send fail in forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star', 'stars'] , Result: OK, OK, ['star', 'stars']


test_case_name = test_t1c2f0_9
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star');append('movie','stars'); slice('movie','1:4')

Description: 2 client, 3 replicas. Client sends slice. Head receives slice and verifies dict, since indices are out of range, sends fail in forward shuttle. All other replicas verify their dict and append result(fail) to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle.
Dict: 'movie': ['stars'] , Result: OK, OK, OK


test_case_name = test_t1c2f0_10
t = 1
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); slice('movie','0:4')

Description: 2 client, 3 replicas. Client sends both operations. Head receives operations and verifies/modifies dict, sends OK in final forward shuttle. All other replicas verify their dict and append result('OK') to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK, OK

***************************************************


-------------------------t = 2, client = 2, failure = 0 ----------------------------------------




test_case_name = test_t2c2f0_1
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star')
workload[1] = put('movie','stars')

Description: 1 client, 3 replicas. Client sends put. Head receives put and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK


test_case_name = test_t2c2f0_2
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','stars')
workload[1] = get('movie')

Description: 1 client, 3 replicas. Client sends get. Head receives get and verifies dict, sends empty string in forward shuttle. All other replicas verify their dict and append result(empty string) to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: {} , Result: fail


test_case_name = test_t2c2f0_3
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','stars')
workload[1] = append('movie','stars')

Description: 1 client, 3 replicas. Client sends append. Head receives append and verifies dict, sends fail as result in forward shuttle. All other replicas verify their dict and send fail in forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: {} , Result: fail



test_case_name = test_t2c2f0_4
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','stars')
workload[1] = append('movie','stars'); slice('movie','0:4')

Description: 1 client, 3 replicas. Client sends slice. Head receives slice and verifies dict, since indices are out of range, sends fail in forward shuttle. All other replicas verify their dict and append result(fail) to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: {} , Result: fail


test_case_name = test_t2c2f0_5
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie','buffs')
workload[1] = put('movie','stars'); get('movie'); append ( 'movie', ' lovers ' )

Description: 1 client, 3 replicas. Client sends valid put , get. Head receives operations and sends dict value for 'movie' in last forward shuttle. All other replicas verify their dict and append dict value for 'movie' to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK, ['star']


***************************************************

test_case_name = test_t2c2f0_6
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie','stars')

Description: 1 client, 3 replicas. Client sends put,append. Head receives both and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star', 'stars'] , Result: OK, OK


test_case_name = test_t2c2f0_7
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); slice('movie','1:4')

Description: 1 client, 3 replicas. Client sends get. Head receives both and verifies/modifies dict, sends fail in forward shuttle. All other replicas verify their dict and append result(fail) to final forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK, fail


test_case_name = test_t2c2f0_8
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie','stars'); get('movie')

Description: 1 client, 3 replicas. Client sends append. Head receives append and verifies dict, sends fail as result in forward shuttle. All other replicas verify their dict and send fail in forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star', 'stars'] , Result: OK, OK, ['star', 'stars']


test_case_name = test_t2c2f0_9
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star');append('movie','stars'); slice('movie','1:4')

Description: 1 client, 3 replicas. Client sends slice. Head receives slice and verifies dict, since indices are out of range, sends fail in forward shuttle. All other replicas verify their dict and append result(fail) to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle.
Dict: 'movie': ['stars'] , Result: OK, OK, OK


test_case_name = test_t2c2f0_10
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); slice('movie','0:4')

Description: 1 client, 3 replicas. Client sends both operations. Head receives operations and verifies/modifies dict, sends OK in final forward shuttle. All other replicas verify their dict and append result('OK') to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK, OK

***************************************************

-------------------------t = 2, client = 2, failure = 1 ----------------------------------------




test_case_name = test_t2c2f1_1
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star')
workload[1] = put('movie','stars')

Description: 1 client, 3 replicas. Client sends put. Head receives put and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK


test_case_name = test_t2c2f1_2
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','stars')
workload[1] = get('movie')

Description: 1 client, 3 replicas. Client sends get. Head receives get and verifies dict, sends empty string in forward shuttle. All other replicas verify their dict and append result(empty string) to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: {} , Result: fail


test_case_name = test_t2c2f1_3
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','stars')
workload[1] = append('movie','stars')

Description: 1 client, 3 replicas. Client sends append. Head receives append and verifies dict, sends fail as result in forward shuttle. All other replicas verify their dict and send fail in forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: {} , Result: fail



test_case_name = test_t2c2f1_4
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','stars')
workload[1] = append('movie','stars'); slice('movie','0:4')

Description: 1 client, 3 replicas. Client sends slice. Head receives slice and verifies dict, since indices are out of range, sends fail in forward shuttle. All other replicas verify their dict and append result(fail) to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: {} , Result: fail


test_case_name = test_t2c2f1_5
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie','buffs')
workload[1] = put('movie','stars'); get('movie'); append ( 'movie', ' lovers ' )

Description: 1 client, 3 replicas. Client sends valid put , get. Head receives operations and sends dict value for 'movie' in last forward shuttle. All other replicas verify their dict and append dict value for 'movie' to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK, ['star']

***************************************************

test_case_name = test_t2c2f1_6
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie','stars')

Description: 1 client, 3 replicas. Client sends put,append. Head receives both and modifies dict, sends forward shuttle. All other replicas modify their dict and forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star', 'stars'] , Result: OK, OK


test_case_name = test_t2c2f1_7
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); slice('movie','1:4')

Description: 1 client, 3 replicas. Client sends get. Head receives both and verifies/modifies dict, sends fail in forward shuttle. All other replicas verify their dict and append result(fail) to final forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK, fail


test_case_name = test_t2c2f1_8
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); append('movie','stars'); get('movie')

Description: 1 client, 3 replicas. Client sends append. Head receives append and verifies dict, sends fail as result in forward shuttle. All other replicas verify their dict and send fail in forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star', 'stars'] , Result: OK, OK, ['star', 'stars']


test_case_name = test_t2c2f1_9
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star');append('movie','stars'); slice('movie','1:4')

Description: 1 client, 3 replicas. Client sends slice. Head receives slice and verifies dict, since indices are out of range, sends fail in forward shuttle. All other replicas verify their dict and append result(fail) to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle.
Dict: 'movie': ['stars'] , Result: OK, OK, OK


test_case_name = test_t2c2f1_10
t = 2
num_client = 2
client_timeout = 3000
head_timeout = 3000
nonhead_timeout = 3000
workload[0] = put('movie','star'); slice('movie','0:4')

Description: 1 client, 3 replicas. Client sends both operations. Head receives operations and verifies/modifies dict, sends OK in final forward shuttle. All other replicas verify their dict and append result('OK') to forward Shuttle. Tail sends result shuttle to client and sends Result Shuttle to other replicas. Client verifies result shuttle. 
Dict: 'movie': ['star'] , Result: OK, OK


***************************************************