import sys
config(channel is fifo, clock is lamport)
from enum import Enum
import nacl.encoding
import nacl.signing
from OrderProof  import OrderProof
from OrderStatement import OrderStatement
from Crypto import Crypto
from State import  State
from Validations import  Validations
from ResultProof import ResultProof
from ResultStatement import ResultStatement
from Shuttle import Shuttle
from ReplicaHistory import ReplicaHistory
import pickle
str_exp = ','
log_level =20
class Client(process):


	def setup(olympus:Olympus,clientNumber:int,signedKey:nacl.signing.SigningKey,olympusPublic:nacl.signing.SigningKey,replicaPublic:list,workload:list):
		self.q = []
		self.head = None
		self.tail=None
		self.replicas = None
		self.upTime = logical_clock()
		self.operationId = 0
		self.signedKey = signedKey
		self.olympusPublic = olympusPublic
		self.replicaPublic= replicaPublic
		self.workload = workload
	
	def run():
		c = logical_clock()
		send(('configuration_request',clientNumber), to=olympus)
		output('Client %i asking for configuration from  Olympus'%(clientNumber,), sep = str_exp, level = log_level)
		await(some(received(('configuration_response' , _, _, _, c2),from_=olympus), has = c2 >=c))
		

		for load in self.workload:
			key = load.key
			value = load.value
			operationName = load.action
			operationId = operationId+1
			c = logical_clock()
			send(('client_operation_request',operationName,key,value,self,operationId,c,clientNumber),to=head)
			output('Client %i sent (%s,%s,%s,%s) to head'%(clientNumber,operationName,operationId,key,value), sep = str_exp, level = log_level)
			if await(some(received(('client_operation_response', _operationName, _operationId,result,resultProof,c2,_tail)), has = c2 < c)):
                
				output('Client:%i received result:%s resultproof:%s from tail'%(clientNumber,result,resultProof), sep = str_exp, level = log_level)
				continue
                

			elif timeout(2):
				output("Failed to receive the response in time, sending request to all replicas")
				send(('client_retransmitted_request',operationName,key,value,self,operationId,logical_clock(),clientNumber),to=replicas)
				
				if await(some(received(('client_retransmitted_response', _operationName, _operationId,result,resultProof,c2,process)))):
                
					output('Client:%i received retransmitted result:%s resultproof:%s from replica:%s'%(clientNumber,result,resultProof,process), sep = str_exp, level = log_level)
					continue
                
				elif timeout(2):
					output("Failed to receive the response in time, ignoring request")
				
		
		send(('done',self,clientNumber), to=parent())
		await(received(('done',), from_=parent()))
		output('client received done from master')
		output('client sending done to olympus')
		send(('done',self,clientNumber), to=olympus)
		
		
		output('Client %i terminating'%(clientNumber), sep = str_exp, level = log_level)
		
		
	def receive(msg= ('configuration_response',replicas,head,tail,c),from_=_olympus):
		output('Client %i received configuration_response from olympus'%(clientNumber,), sep = str_exp, level = log_level)
		self.head = head
		self.tail = tail
		self.replicas = replicas