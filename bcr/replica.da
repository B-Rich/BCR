import re
import sys
from ensurepip import _disable_pip_configuration_settings
config(channel is fifo, clock is lamport)
from enum import Enum
import nacl.encoding
import nacl.signing
from OrderProof  import OrderProof
from OrderStatement import OrderStatement
from Crypto import Crypto
from State import  State
from Validations import  Validations
from ResultProof import ResultProof
from ResultStatement import ResultStatement
from Shuttle import Shuttle
from ReplicaHistory import ReplicaHistory
from MessageNumber import MessageNumber
from MessageTypes import MessageTypes
from FailureTypes import FailureTypes
import pickle
str_exp = ','
log_level =20
cl = import_da('client')	
ol = import_da('olympus')

class Replica(process):

	def setup(olympus:ol.Olympus,state:State,olympusPublic:nacl.signing.SigningKey,clientPublic:list,replicaPublic:list,replicaPrivate:list):
		self.isHead = False
		self.isTail = False
		self.prevReplica = None
		self.nextReplica = None
		self.runningState = None
		self.configuration = -1
		self.head = None
		self.upTime = logical_clock()
		self.state = state
		self.replicaChain = None
		self.operationDict = dict()
		self.resultDict = dict()    #operation to result mapping
		self.last_slot = -1
		self.index = -1
		self.olympusPublic = olympusPublic
		self.clientPublic = clientPublic
		self.replicaPublicList = replicaPublic
		self.replicaPrivateList = replicaPrivate
		self.replicaPrivate = None
		self.replicaPublic = None
		self.validations =  Validations()
		self.replicaHistory = ReplicaHistory()
		self.failcase = []
		self.messageNumber = MessageNumber()
	
	def actionsAtEveryReplica(operationName,key,value,operationId,client,slot,shuttle,clientNumber):
		
		result =None
		if(operationName == 'put'):
			runningState[key] = [value]
			result = 'OK'
			resultDict[(operationId,client)] = result
		elif(operationName == 'get'):
			result = ""
			if key in runningState.keys():
				result = runningState[key]
			resultDict[(operationId,client)] = result
		elif(operationName == 'append'):
			result = 'OK'
			if key in runningState.keys():
				runningState[key].append(value)
			else:
				result = 'fail'
			resultDict[(operationId,client)] = result
		elif(operationName == 'slice'):
			result = 'fail'
			if key in runningState.keys():
				value = re.split(":",value)
				x = int(value[0])
				range = int(value[1])
				klength = len(runningState[key])
				if (x < klength):
					modif = runningState[key]
					modif = modif[x:min(range,(klength-1))]
					runningState[key] = modif
					result = 'OK'
			resultDict[(operationId,client)] = result
		
		failurecase = FailureCase(failcase,configuration,index,operationName,result,shuttle,clientNumber)	
		orderStatement = OrderStatement(slot,operationName,operationId,index)
		shuttle.addOrderStatement(orderStatement)
		resultStatement = ResultStatement(result,operationName,operationId)
		shuttle.addResultStatement(resultStatement)
		
		replicaHistory.insertOperation((operationName,operationId,client),result,slot)
			
		output('[Replica:%i runningState:%s OperationName:%s OperationId:%i replicaHistory:%s]'%(index,runningState,operationName,operationId,replicaHistory), sep = str_exp, level = log_level)
		
		
		
		
	
	def run():
		output('Starting Replica', sep = str_exp, level = log_level)
		-- yieldInitHist
		await(some(received(('inithist' , _, _, _, _, _, c2),from_=olympus)))
		
		await(received(('done',), from_=olympus))
		output('replica received  done from olympus')
		send(('done',self), to=olympus)
		output('replica send  done to olympus')
	
	def generateResponseFromResultShuttle(operationName,key,value,client,operationId,clock,clientNumber):
		(status,shuttle) = replicaHistory.getResultShuttleForOperation((operationName,operationId,client))
		response = resultDict[(operationId,client)]
		send(('client_retransmitted_response',operationName,operationId,response,shuttle.getResultProof(),logical_clock(),self),to = client)
		output('Replica:%i sent client_retransmitted_response to client:%s'%(index,client))	
		
	def awaitingForBackwardShuttle(operationName,key,value,client,operationId,clock,clientNumber):
		if await(replicaHistory.isResultShuttleArrivedForOperation((operationName,operationId,client))):
			generateResponseFromResultShuttle(operationName,key,value,client,operationId,clock,clientNumber)
							
		elif timeout(120):
			output('Replica:%i timeout out waiting for backward shuttle client:%s'%(index,client), sep = str_exp, level = log_level)
			send(('reconfiguration_request',index),to = olympus)
		
	def receive(msg= ('client_retransmitted_request',operationName,key,value,client,operationId,clock,clientNumber),from_=sender):
		output('Replica %i received retransmitted request from process:%s client:%s '%(index,sender,client), sep = str_exp, level = log_level)	
		res = validations.shouldReplicaAcceptRequest(state)
		
		if res:
			
			messageNumber.incrementMessageType(clientNumber,MessageTypes.DIRECT)
			output('-------message count:%s'%(messageNumber.getDict()))
			
			if replicaHistory.isResultShuttleArrivedForOperation((operationName,operationId,client)):
				output('Replica:%i has result shuttle '%(index,))	
				generateResponseFromResultShuttle(operationName,key,value,client,operationId,clock,clientNumber)
				
			
			elif isHead:
				output('Replica:%i doesnot have result shuttle'%(index))	
				if replicaHistory.isOperationExist((operationName,operationId,client)):
					output('Replica:%i has already seen the operaation'%(index))
					awaitingForBackwardShuttle(operationName,key,value,client,operationId,clock,clientNumber)
						
				else:
					output('Replica:%i has not already seen the operation:%s.Initiating the protocol from scratch'%(index))
					send(('client_operation_request',operationName,key,value,client,operationId,logical_clock(),clientNumber),to=head)
					
					
			else:
				output('Replica:%i is not head. Sending the retransmitted request to head:%s'%(index,head))	
				send(('client_retransmitted_request',operationName,key,value,client,operationId,clock,clientNumber),to=head)
				awaitingForBackwardShuttle(operationName,key,value,client,operationId,clock,clientNumber)
					
					
	def receive(msg= ('client_operation_request',operationName,key,value,client,operationId,logical_Clock,clientNumber)):
		if validations.shouldReplicaAcceptRequest(self.state):
		
			output('Replica %i received operation request from client %i '%(index,clientNumber), sep = str_exp, level = log_level)
			messageNumber.incrementMessageType(clientNumber,MessageTypes.DIRECT)
			failureType = FailureTypes. 
			output('-------message count:%s'%(messageNumber.getDict()))
			orderProof = None
			resultProof = None
			shuttle = None
			if(isHead):
				last_slot = last_slot +1
				orderProof = OrderProof([],last_slot,operationName,operationId)
				resultProof = ResultProof([],operationName,operationId)
				shuttle =  Shuttle(resultProof,orderProof)
				
			actionsAtEveryReplica(operationName,key,value,operationId,client,last_slot,shuttle)
			
			send(('forward_shuttle',operationName,key,value,client,operationId,last_slot,shuttle,clientNumber),to = nextReplica)
		else:
			output('replica did not accept request')
		
		

	def validateForwardShuttle(operationId,slot,shuttle):
		if slot in replicaHistory.slotOperationDict.keys():
			return False
		elif ((last_slot+1)!= slot):
			return False
		else:
			checkval = True
			x = 0
			if ((x in range(index)) & (checkval == True)):
				for ordstmt in OrderProof.getlistOfOrderSt(shuttle.orderProof):
					if (ordstmt.replicaId != x):
						checkval = False
				x = x+1
			if (checkval == False):
				return False
			else:
				return True


	def validateBackwardShuttle(operationId,slot,client,shuttle):
		for rstmt in ResultProof.getlistOfResultSt(shuttle.resultProof):
			if (resultDict[(operationId,client)] != rstmt.result):
				return False
		return True
			
	def receive(msg= ('forward_shuttle',operationName,key,value,client,operationId,slot,shuttle,clientNumber),from_=_prevReplica):
		output('Replica %i received forward shuttle'%(index,), sep = str_exp, level = log_level)
		messageNumber.incrementMessageType(clientNumber,MessageTypes.SHUTTLE)
		output('-------message count:%s'%(messageNumber.getDict()))
		if(validateForwardShuttle(operationId,slot,shuttle)==False):
			send(('reconfiguration_request',index),to = olympus)
		else:
			output('Forward Shuttle passed validation')
			last_slot = slot
			actionsAtEveryReplica(operationName,key,value,operationId,client,slot,shuttle,clientNumber)
			
			if(isTail):
				response = resultDict[(operationId,client)]
				send(('client_operation_response',operationName,operationId,response,shuttle.getResultProof(),logical_clock(),self),to = client)
				replicaHistory.setResultShuttleForOperation((operationName,operationId,client),shuttle)
				send(('backward_shuttle',operationName,key,value,client,operationId,slot,shuttle,clientNumber),to = prevReplica)
			
			else:
				send(('forward_shuttle',operationName,key,value,client,operationId,slot,shuttle,clientNumber),to = nextReplica)

			
	
	def receive(msg= ('backward_shuttle',operationName,key,value,client,operationId,slot,shuttle,clientNumber),from_=_nextReplica):
		output('Replica %i received backward shuttle'%(index,), sep = str_exp, level = log_level)
		messageNumber.incrementMessageType(clientNumber,MessageTypes.RESULT_SHUTTLE)
		output('-------message count:%s'%(messageNumber.getDict()))
		if(validateBackwardShuttle(operationId,slot,client,shuttle)==False):
			send(('reconfiguration_request',index),to = olympus)
		else:
			output('Backward Shuttle passed validation')
			replicaHistory.setResultShuttleForOperation((operationName,operationId,client),shuttle)
			output('[Replica:%i runningState:%s OperationName:%s OperationId:%i replicaHistory:%s]'%(index,runningState,operationName,operationId,replicaHistory), sep = str_exp, level = log_level)

		if isHead:
			output('backward shuttle reached head')

			
		else:
			send(('backward_shuttle',operationName,key,value,client,operationId,slot,shuttle,clientNumber),to = prevReplica)
		
	
	def receive(msg= ('inithist',running_State,replicas,head,tail,index,c,configuration,failcase),from_=_olympus,at=(yieldInitHist,)):
		
		self.head = head
		self.runningState = running_State
		self.replicaChain = replicas
		self.index = index
		self.replicaPrivate = replicaPrivateList[index]
		self.replicaPublic = replicaPublicList[index]
		self.configuration = configuration
		self.failcase = failcase
		
		if(index == 0):
			self.isHead = True
			self.nextReplica = replicaChain[index+1]
			output("Replica %i is head" % (index,), sep = str_exp, level = log_level)
	 		
		elif(index == len(replicaChain)-1):
			self.isTail =True
			self.prevReplica = replicaChain[index-1]
			output("Replica %i is tail" % (index,), sep = str_exp, level = log_level)
		else:
			self.prevReplica = replicaChain[index-1]
			self.nextReplica = replicaChain[index+1]
		self.state = State.ACTIVE
		output('replica %i received inithist from olympus'%(index,), sep = str_exp, level = log_level)
		send(('inithist_response',self),to = olympus)
		