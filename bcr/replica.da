import re
import sys
from ensurepip import _disable_pip_configuration_settings
config(channel is fifo, clock is lamport)
from enum import Enum
import nacl.encoding
import nacl.signing
from OrderProof  import OrderProof
from OrderStatement import OrderStatement
from Crypto import Crypto
from State import  State
from Validations import  Validations
from ResultProof import ResultProof
from ResultStatement import ResultStatement
from Shuttle import Shuttle
from ReplicaHistory import ReplicaHistory
from MessageNumber import MessageNumber
from MessageTypes import MessageTypes
from FailureCase import FailureCase
from FailureChecks import FailureChecks
import pickle
str_exp = ','
log_level =20
cl = import_da('client')	
ol = import_da('olympus')

class Replica(process):

	def setup(olympus:ol.Olympus,state:State,olympusPublic:nacl.signing.SigningKey,clientPublic:list,replicaPublic:list,replicaPrivate:list):
		self.isHead = False
		self.isTail = False
		self.prevReplica = None
		self.nextReplica = None
		self.runningState = None
		self.configuration = -1
		self.head = None
		self.upTime = logical_clock()
		self.state = state
		self.replicaChain = None
		self.operationDict = dict()
		self.resultDict = dict()    #operation to result mapping
		self.last_slot = -1
		self.index = -1
		self.olympusPublic = olympusPublic
		self.clientPublic = clientPublic
		self.replicaPublicList = replicaPublic
		self.replicaPrivateList = replicaPrivate
		self.replicaPrivate = None
		self.replicaPublic = None
		self.validations =  Validations()
		self.replicaHistory = ReplicaHistory()
		self.failcase = []
		self.messageNumber = MessageNumber()
		self.crypto = Crypto()
		self.failureChecks = FailureChecks()
		self.hasReceivedDone = False
	
	def actionsAtEveryReplica(operationName,key,value,operationId,client,slot,shuttle,clientNumber,messageType):
		
		result =None
		
		if(operationName == 'put'):
			runningState[key] = [value]
			result = 'OK'
			resultDict[(operationId,client)] = result
		elif(operationName == 'get'):
			result = ""
			if key in runningState.keys():
				result = runningState[key]
			resultDict[(operationId,client)] = result
		elif(operationName == 'append'):
			result = 'OK'
			if key in runningState.keys():
				runningState[key].append(value)
			else:
				result = 'fail'
			resultDict[(operationId,client)] = result
		elif(operationName == 'slice'):
			result = 'fail'
			if key in runningState.keys():
				value = re.split(":",value)
				x = int(value[0])
				range = int(value[1])
				klength = len(runningState[key])
				if (x < klength):
					#modif = runningState[key]
					#modif = modif[x:min(range,(klength-1))]
					runningState[key] = runningState[key][x:range]
					result = 'OK'
			resultDict[(operationId,client)] = result
		
		if (self.failureChecks.change_operation == True) & (self.isTail == False) :
			operationName = 'get'
			output('operation modified for forward shuttle in Replica:%i' % index)
			self.failureChecks.change_operation = False
			#key = 'x'
			#value = None

		orderStatement = OrderStatement(slot,operationName,operationId,index)
		signedSerializedOrderStatements = crypto.sign(replicaPrivate,orderStatement)
		shuttle.addOrderStatement(signedSerializedOrderStatements)
		#output('order proof of Replica:%i is %s' %(index, shuttle.orderProof))

		resultHash = crypto.getHash(result)
		resultStatement = ResultStatement(resultHash,operationName,operationId,index)
		signedSerializedResultStatements = crypto.sign(replicaPrivate,resultStatement)
		shuttle.addResultStatement(signedSerializedResultStatements)

		#output('result proof of Replica:%i is %s' % (index, shuttle.resultProof))
		replicaHistory.insertOperation((operationName,operationId,client),result,slot)	
		output('[Replica:%i runningState:%s OperationName:%s OperationId:%i ]'%(index,runningState,operationName,operationId), sep = str_exp, level = log_level)
		#output('[Replica:%i runningState:%s OperationName:%s OperationId:%i replicaHistory:%s]'%(index,runningState,operationName,operationId,replicaHistory), sep = str_exp, level = log_level)
		#output('failure case for replica:%i is %s' % (index,failurecase))
		
	def run():
		output('Starting Replica', sep = str_exp, level = log_level)
		-- yieldInitHist
		await(some(received(('inithist' , _, _, _, _, _, c2),from_=olympus)))
		
		await(received(('done',), from_=olympus))
		output('replica received  done from olympus')
		send(('done',self), to=olympus)
		output('replica send  done to olympus')
	
	def generateResponseFromResultShuttle(operationName,key,value,client,operationId,clock,clientNumber):
		(status,shuttle) = replicaHistory.getResultShuttleForOperation((operationName,operationId,client))
		response = resultDict[(operationId,client)]
		send(('client_operation_response',operationName,operationId,response,shuttle.getResultProof(),logical_clock(),self),to = client)
		output('Replica:%i sent client_retransmitted_response to client:%s'%(index,client))	
		
	def awaitingForBackwardShuttle(operationName,key,value,client,operationId,clock,clientNumber):
		if await(replicaHistory.isResultShuttleArrivedForOperation((operationName,operationId,client))):
			generateResponseFromResultShuttle(operationName,key,value,client,operationId,clock,clientNumber)
							
		elif timeout(120):
			output('Replica:%i timeout out waiting for backward shuttle client:%s'%(index,client), sep = str_exp, level = log_level)
			send(('reconfiguration_request',index),to = olympus)
	
	def resultCheck(tshuttle):
		shuttle = tshuttle
		if (self.failureChecks.change_result == True) :	
			resultstmtlist = shuttle.resultProof.getlistOfResultSt()
			currentEncodedSt = resultstmtlist[index]
			currentKey = replicaPublicList[index];
			decodeSt = crypto.isSignatureVerified(currentKey,currentEncodedSt)
			decodeSt.result = crypto.getHash(decodeSt.result)
			signedSerializedResultStatements = crypto.sign(replicaPrivate,decodeSt)
			resultstmtlist[index] = signedSerializedResultStatements
			shuttle.resultProof.setlistOfOrderSt(resultstmtlist)
			output('Result Shuttle modified in Replica:%i' % index)
			self.failureChecks.change_result = False
				
		if (self.failureChecks.drop_result_stmt == True) :
			resultstmtlist = shuttle.resultProof.getlistOfResultSt()
			resultstmtlist = resultstmtlist[1:]
			shuttle.resultProof.setlistOfOrderSt(resultstmtlist)
			output('Result Shuttle modified in Replica:%i' % index)
			self.failureChecks.drop_result_stmt = False
		
		return shuttle
		
	def receive(msg= ('client_retransmission_request',operationName,key,value,client,operationId,clock,clientNumber),from_=sender):
		output('Replica %i received retransmitted request from process:%s client:%s '%(index,sender,client), sep = str_exp, level = log_level)	
		res = validations.shouldReplicaAcceptRequest(state)
		
		if res:
			
			messagetype = MessageTypes.DIRECT
			messageNumber.incrementMessageType(clientNumber,MessageTypes.DIRECT)
			output('Replica:%i message count:%s'%(index, messageNumber.getDict()))
			failurecase = FailureCase(failcase,index,clientNumber,messagetype,messageNumber,failureChecks)
			self.failureChecks = failurecase.failureChecks
			output('Failure trigger is %s for the received message in Replica: %i' % (failurecase,index))

			
			if replicaHistory.isResultShuttleArrivedForOperation((operationName,operationId,client)):
				output('Replica:%i has result shuttle '%(index,))	
				generateResponseFromResultShuttle(operationName,key,value,client,operationId,clock,clientNumber)
				
			
			elif isHead:
				output('Replica:%i doesnot have result shuttle'%(index))	
				if replicaHistory.isOperationExist((operationName,operationId,client)):
					output('Replica:%i has already seen the operation'%(index))
					awaitingForBackwardShuttle(operationName,key,value,client,operationId,clock,clientNumber)
						
				else:
					output('Replica:%i has not already seen the operation:%s.Initiating the protocol from scratch'%(index))
					last_slot = last_slot +1
					orderProof = OrderProof([],last_slot,operationName,operationId)
					resultProof = ResultProof([],operationName,operationId)
					shuttle =  Shuttle(resultProof,orderProof)
					actionsAtEveryReplica(operationName,key,value,operationId,client,last_slot,shuttle,clientNumber,messagetype)
					send(('forward_shuttle',operationName,key,value,client,operationId,last_slot,shuttle,clientNumber),to = nextReplica)
					awaitingForBackwardShuttle(operationName,key,value,client,operationId,clock,clientNumber)
					
					
			else:
				output('Replica:%i is not head. Sending the retransmitted request to head:%s'%(index,head))	
				send(('client_retransmitted_request',operationName,key,value,client,operationId,clock,clientNumber),to=head)
				awaitingForBackwardShuttle(operationName,key,value,client,operationId,clock,clientNumber)
					
					
	def receive(msg= ('client_operation_request',operationName,key,value,client,operationId,logical_Clock,clientNumber)):
		if validations.shouldReplicaAcceptRequest(self.state):
					
			messagetype = MessageTypes.DIRECT
			messageNumber.incrementMessageType(clientNumber,MessageTypes.DIRECT)
			output('Replica %i received client_operation request %s from client %i '%(index,str(messageNumber.getClientMessageTypeCount(clientNumber,messagetype)),clientNumber), sep = str_exp, level = log_level)
			output('Replica:%i message count:%s'%(index, messageNumber.getDict()))
			failurecase = FailureCase(failcase,index,clientNumber,messagetype,messageNumber,failureChecks)
			self.failureChecks = failurecase.failureChecks
			output('Failure trigger is %s for the client_operation request %s in Replica: %i' % (failurecase,str(messageNumber.getClientMessageTypeCount(clientNumber,messagetype)),index))

			orderProof = None
			resultProof = None
			shuttle = None
			if(isHead):
				last_slot = last_slot +1
				orderProof = OrderProof([],last_slot,operationName,operationId)
				resultProof = ResultProof([],operationName,operationId)
				shuttle =  Shuttle(resultProof,orderProof)
				
			actionsAtEveryReplica(operationName,key,value,operationId,client,last_slot,shuttle,clientNumber,messagetype)
			
			send(('forward_shuttle',operationName,key,value,client,operationId,last_slot,shuttle,clientNumber),to = nextReplica)
		else:
			output('replica did not accept request')
			
	def validateForwardShuttle(operationId,operationName,slot,shuttle):
		if slot in replicaHistory.slotOperationDict.keys():
			output("Forward Shuttle validation fail: slot already used")
			return False
		elif ((last_slot+1)!= slot):
			output("Forward Shuttle validation fail: slot not continuous")
			return False
		elif len(shuttle.orderProof.getlistOfOrderSt()) < index :
			output("Forward Shuttle validation fail: Order Statement of previous replica missing")
			return False
		elif len(shuttle.resultProof.getlistOfResultSt()) < index :
			output("Forward Shuttle validation fail: Result Statement of previous replica missing")
			return False
		else:				
			orderSt = shuttle.orderProof.getlistOfOrderSt()
			for i in range(len(orderSt)):
				currentEncodedSt = orderSt[i]
				currentKey = replicaPublicList[i]
				ordstmt = crypto.isSignatureVerified(currentKey,currentEncodedSt)
				if(ordstmt is None):
					output("Result Shuttle validation fail: Signature not verified")
					return False
					
				if (operationId != ordstmt.operationId):
					output("Forward Shuttle validation fail: operation ID of orderproof different")
					return False
				if (operationName != ordstmt.operationName):
					output("Forward Shuttle validation fail: operationName of orderproof different")
					return False
				if (slot != ordstmt.slot):
					output("Forward Shuttle validation fail: slot of orderproof different")
					return False
				
			return True


	def validateBackwardShuttle(operationId,slot,client,shuttle):
		isResultValid = validations.validationOfResultProof(resultDict[(operationId,client)],shuttle.resultProof,replicaPublicList)
		output('Client:%i is result matched'%(isResultValid))
		return isResultValid

			
	def receive(msg= ('forward_shuttle',operationName,key,value,client,operationId,slot,shuttle,clientNumber),from_=_prevReplica):
		
		messagetype = MessageTypes.SHUTTLE
		messageNumber.incrementMessageType(clientNumber,messagetype)
		output('Replica %i received forward shuttle %s for client %i'%(index,str(messageNumber.getClientMessageTypeCount(clientNumber,messagetype)),clientNumber), sep = str_exp, level = log_level)
		#messageNumber.getClientMessageTypeCount(clientNumber,messagetype)
		output('Replica:%i message count:%s'%(index, messageNumber.getDict()))
		
		failurecase = FailureCase(failcase,index,clientNumber,messagetype,messageNumber,failureChecks)
		self.failureChecks = failurecase.failureChecks
		output('Failure trigger is %s for the forward shuttle in Replica: %i' % (failurecase,index))
		
		if(validateForwardShuttle(operationId,operationName,slot,shuttle)==False):
			send(('reconfiguration_request',index),to = olympus)
			output('Replica:%i sent reconfiguration_request to Olympus'%index)
		
		else:
			output('Forward Shuttle passed validation at Replica:%i' % index)
			last_slot = slot
			actionsAtEveryReplica(operationName,key,value,operationId,client,slot,shuttle,clientNumber,messagetype)
			
			if(isTail):
				response = resultDict[(operationId,client)]
				shuttle = self.resultCheck(shuttle)
				send(('client_operation_response',operationName,operationId,response,shuttle.getResultProof(),logical_clock(),self),to = client)
				output('client result shuttle sent from tail')
				replicaHistory.setResultShuttleForOperation((operationName,operationId,client),shuttle)
				send(('backward_shuttle',operationName,key,value,client,operationId,slot,shuttle,clientNumber),to = prevReplica)
				output('backward shuttle generated from tail')
			
			else:
				send(('forward_shuttle',operationName,key,value,client,operationId,slot,shuttle,clientNumber),to = nextReplica)

			
	
	def receive(msg= ('backward_shuttle',operationName,key,value,client,operationId,slot,shuttle,clientNumber),from_=_nextReplica):
		
		
		messagetype = MessageTypes.RESULT_SHUTTLE
		messageNumber.incrementMessageType(clientNumber,messagetype)
		output('Replica %i received backward shuttle %s for client %i'%(index,str(messageNumber.getClientMessageTypeCount(clientNumber,messagetype)),clientNumber), sep = str_exp, level = log_level)
		output('Replica:%i message count:%s'%(index, messageNumber.getDict()))
		failurecase = FailureCase(failcase,index,clientNumber,messagetype,messageNumber,failureChecks)
		self.failureChecks = failurecase.failureChecks	
		output('Failure trigger is %s for the received message in Replica: %i' % (failurecase,index))
		
		if(validateBackwardShuttle(operationId,slot,client,shuttle)==False):
			send(('reconfiguration_request',index),to = olympus)
			output('Replica:%i sent reconfiguration_request to Olympus'%index)
		
		else:
			output('Backward Shuttle passed validation at Replica:%i' % index)
			replicaHistory.setResultShuttleForOperation((operationName,operationId,client),shuttle)
			output('[Replica:%i runningState:%s OperationName:%s OperationId:%i]'%(index,runningState,operationName,operationId), sep = str_exp, level = log_level)
			#output('[Replica:%i runningState:%s OperationName:%s OperationId:%i replicaHistory:%s]'%(index,runningState,operationName,operationId,replicaHistory), sep = str_exp, level = log_level)

			if isHead:
				output('backward shuttle reached head')
			else:	
				shuttle = self.resultCheck(shuttle)
				send(('backward_shuttle',operationName,key,value,client,operationId,slot,shuttle,clientNumber),to = prevReplica)
		
	def receive(msg= ('inithist',running_State,replicas,head,tail,index,c,configuration,failcase),from_=_olympus,at=(yieldInitHist,)):
		
		self.head = head
		self.runningState = running_State
		self.replicaChain = replicas
		self.index = index
		self.replicaPrivate = replicaPrivateList[index]
		self.replicaPublic = replicaPublicList[index]
		self.configuration = configuration
		self.failcase = failcase
		
		if(index == 0):
			self.isHead = True
			self.nextReplica = replicaChain[index+1]
			output("Replica %i is head" % (index,), sep = str_exp, level = log_level)
	 		
		elif(index == len(replicaChain)-1):
			self.isTail =True
			self.prevReplica = replicaChain[index-1]
			output("Replica %i is tail" % (index,), sep = str_exp, level = log_level)
		else:
			self.prevReplica = replicaChain[index-1]
			self.nextReplica = replicaChain[index+1]
		self.state = State.ACTIVE
		output('replica %i received inithist from olympus'%(index,), sep = str_exp, level = log_level)
		send(('inithist_response',self),to = olympus)
		